<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <!-- POM file generated with GWT webAppCreator -->
  <modelVersion>4.0.0</modelVersion>
  <groupId>au.com.uptick.gwt.maven.sample</groupId>
  <artifactId>MyGwtMavenSampleApp</artifactId>
  <packaging>war</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>au.com.uptick.gwt.maven.sample.MyGwtMavenSampleApp</name>


  <!-- 
  *************************************************
  LEER:
  *************************************************
   
  		http://mojo.codehaus.org/gwt-maven-plugin/eclipse/google_plugin.html 
  		http://mojo.codehaus.org/gwt-maven-plugin/user-guide/project.html
  		
  *************************************************  		
  -->


  <properties>
  
  	 <webapp.dir>src/main/webapp</webapp.dir>
	 <web.inf>${webapp.dir}/WEB-INF</web.inf>
	 <webInfLibPath>${web.inf}/lib</webInfLibPath>
	 
      <!-- Convenience property to set the GWT version -->
      <gwtVersion>2.1.1</gwtVersion>
	  <org.springframework.version>3.0.5.RELEASE</org.springframework.version>
      
      <!-- GWT needs at least java 1.5 -->
      <maven.compiler.source>1.5</maven.compiler.source>
      <maven.compiler.target>1.5</maven.compiler.target>
  </properties>

  <dependencies>
  
    <dependency>
      <groupId>com.google.gwt</groupId>
      <artifactId>gwt-servlet</artifactId>
      <version>${gwtVersion}</version>
      <scope>runtime</scope>
    </dependency>
    
    <dependency>
      <groupId>com.google.gwt</groupId>
      <artifactId>gwt-user</artifactId>
      <version>${gwtVersion}</version>
      <scope>provided</scope>
    </dependency>
    
    <dependency>
      <groupId>com.google.gwt</groupId>
      <artifactId>gwt-dev</artifactId>
      <version>${gwtVersion}</version>
      <scope>test</scope>
    </dependency>
    
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.4</version>
      <scope>test</scope>
    </dependency>
    
    <!--
    Core utilities used by other modules.
    Define this if you use Spring Utility APIs (org.springframework.core.*/org.springframework.util.*)
	-->
	<dependency>
	  <groupId>org.springframework</groupId>
	  <artifactId>spring-core</artifactId>
	  <version>${org.springframework.version}</version>
	</dependency>
	 
	<!--
	    Expression Language (depends on spring-core)
	    Define this if you use Spring Expression APIs (org.springframework.expression.*)
	-->
	<dependency>
	  <groupId>org.springframework</groupId>
	  <artifactId>spring-expression</artifactId>
	  <version>${org.springframework.version}</version>
	</dependency>
	 
	<!--
	    Bean Factory and JavaBeans utilities (depends on spring-core)
	    Define this if you use Spring Bean APIs (org.springframework.beans.*)
	-->
	<dependency>
	  <groupId>org.springframework</groupId>
	  <artifactId>spring-beans</artifactId>
	  <version>${org.springframework.version}</version>
	</dependency>
	 
	<!--
	    Aspect Oriented Programming (AOP) Framework (depends on spring-core, spring-beans)
	    Define this if you use Spring AOP APIs (org.springframework.aop.*)
	-->
	<dependency>
	  <groupId>org.springframework</groupId>
	  <artifactId>spring-aop</artifactId>
	  <version>${org.springframework.version}</version>
	</dependency>
	 
	<!--
	    Application Context (depends on spring-core, spring-expression, spring-aop, spring-beans)
	    This is the central artifact for Spring's Dependency Injection Container and is generally always defined
	-->
	<dependency>
	  <groupId>org.springframework</groupId>
	  <artifactId>spring-context</artifactId>
	  <version>${org.springframework.version}</version>
	</dependency>
	 
	<!--
	    Various Application Context utilities, including EhCache, JavaMail, Quartz, and Freemarker integration
	    Define this if you need any of these integrations
	-->
	<dependency>
	  <groupId>org.springframework</groupId>
	  <artifactId>spring-context-support</artifactId>
	  <version>${org.springframework.version}</version>
	</dependency>
	 
	<!--
	    Transaction Management Abstraction (depends on spring-core, spring-beans, spring-aop, spring-context)
	    Define this if you use Spring Transactions or DAO Exception Hierarchy
	    (org.springframework.transaction.*/org.springframework.dao.*)
	-->
	<dependency>
	  <groupId>org.springframework</groupId>
	  <artifactId>spring-tx</artifactId>
	  <version>${org.springframework.version}</version>
	</dependency>
	 
	<!--
	    JDBC Data Access Library (depends on spring-core, spring-beans, spring-context, spring-tx)
	    Define this if you use Spring's JdbcTemplate API (org.springframework.jdbc.*)
	-->
	<dependency>
	  <groupId>org.springframework</groupId>
	  <artifactId>spring-jdbc</artifactId>
	  <version>${org.springframework.version}</version>
	</dependency>
	 
	<!--
	    Object-to-Relation-Mapping (ORM) integration with Hibernate, JPA, and iBatis.
	    (depends on spring-core, spring-beans, spring-context, spring-tx)
	    Define this if you need ORM (org.springframework.orm.*)
	-->
	<dependency>
	  <groupId>org.springframework</groupId>
	  <artifactId>spring-orm</artifactId>
	  <version>${org.springframework.version}</version>
	</dependency>
	 
	<!--
	    Object-to-XML Mapping (OXM) abstraction and integration with JAXB, JiBX, Castor, XStream, and XML Beans.
	    (depends on spring-core, spring-beans, spring-context)
	    Define this if you need OXM (org.springframework.oxm.*)
	-->
	<dependency>
	  <groupId>org.springframework</groupId>
	  <artifactId>spring-oxm</artifactId>
	  <version>${org.springframework.version}</version>
	</dependency>
	 
	<!--
	    Web application development utilities applicable to both Servlet and Portlet Environments
	    (depends on spring-core, spring-beans, spring-context)
	    Define this if you use Spring MVC, or wish to use Struts, JSF, or another web framework with Spring (org.springframework.web.*)
	-->
	<dependency>
	  <groupId>org.springframework</groupId>
	  <artifactId>spring-web</artifactId>
	  <version>${org.springframework.version}</version>
	</dependency>
	 
	<!--
	    Spring MVC for Servlet Environments (depends on spring-core, spring-beans, spring-context, spring-web)
	    Define this if you use Spring MVC with a Servlet Container such as Apache Tomcat (org.springframework.web.servlet.*)
	-->
	<dependency>
	  <groupId>org.springframework</groupId>
	  <artifactId>spring-webmvc</artifactId>
	  <version>${org.springframework.version}</version>
	</dependency>
	 
	<!--
	    Spring MVC for Portlet Environments (depends on spring-core, spring-beans, spring-context, spring-web)
	    Define this if you use Spring MVC with a Portlet Container (org.springframework.web.portlet.*)
	-->
	<dependency>
	  <groupId>org.springframework</groupId>
	  <artifactId>spring-webmvc-portlet</artifactId>
	  <version>${org.springframework.version}</version>
	</dependency>
	 
	<!--
	    Support for testing Spring applications with tools such as JUnit and TestNG
	    This artifact is generally always defined with a 'test' scope for the integration testing framework and unit testing stubs
	-->
	<dependency>
	  <groupId>org.springframework</groupId>
	  <artifactId>spring-test</artifactId>
	  <version>${org.springframework.version}</version>
	  <scope>test</scope>
	</dependency>
	
	<!--
		Utilidad para trabajar de forma transparente con los servicios de spring en GWT 
		Esta utilidad la tuvimos que instalar manualmente en el repositorio de maven
		mvn install:install-file -Dfile=spring4gwt-0.0.1.jar -DgroupId=code.google.com -DartifactId=spring4gwt -Dversion=0.0.1 -Dpackaging=jar -DgeneratePom=true
	 -->
    <dependency>
      <groupId>code.google.com</groupId>
      <artifactId>spring4gwt</artifactId>
      <version>0.0.1</version>
      <scope>compile</scope>
    </dependency>
    
    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
      <version>1.2.16</version>
      <scope>compile</scope>
    </dependency>
    
    <!-- Oracle driver -->
    
	<dependency>
		<groupId>com.oracle.driver</groupId>
		<artifactId>ojdbc14</artifactId>
		<version>14</version>
	</dependency>

	<!-- Hibernate 3 -->

	<dependency>
		<groupId>org.hibernate.javax.persistence</groupId>
		<artifactId>hibernate-jpa-2.0-api</artifactId>
		<version>1.0.1.Final</version>
	</dependency>


	<dependency>
		<groupId>org.hibernate</groupId>
		<artifactId>hibernate-core</artifactId>
		<version>3.5.2-Final</version>
	</dependency>
	
	<dependency>
		<groupId>org.hibernate</groupId>
		<artifactId>hibernate-entitymanager</artifactId>
		<version>3.5.2-Final</version>
	</dependency>
	
<!-- 	<dependency> -->
<!-- 		<groupId>org.hibernate</groupId> -->
<!-- 		<artifactId>hibernate-validator</artifactId> -->
<!-- 		<version>4.2.0.Final</version> -->
<!-- 	</dependency> -->


	<!-- Necesario para Hibernate, ya que pide una clase cuando inicializa la app y sino la tiene pincha.
	     Es por eso que se tiene q bajar esta dependencia extra a SLF4J -->
	<dependency>
		<groupId>org.slf4j</groupId>
		<artifactId>slf4j-log4j12</artifactId>
		<version>1.5.8</version>
	</dependency>

	<!-- Necesario para algunas anotaciones como el @PostConstruct -->
<!-- 	<dependency> -->
<!-- 		<groupId>javaee</groupId> -->
<!-- 		<artifactId>javaee-api</artifactId> -->
<!-- 		<version>5</version> -->
<!-- 	</dependency> -->
       
	    
    
  </dependencies>
  
  <build>
    <!-- Generate compiled stuff in the folder used for developing mode --> 
    <outputDirectory>target/www/WEB-INF/classes</outputDirectory>
    
    <plugins>
      
      <!-- GWT Maven Plugin-->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>gwt-maven-plugin</artifactId>
         <dependencies>
          <!-- En caso que se utilice una version de ls SDK de GWT diferente a la que soporta este plugin (2.4.0)
               agregamos estas dos dependencias -->
          <dependency>
            <groupId>com.google.gwt</groupId>
            <artifactId>gwt-user</artifactId>
            <version>${gwtVersion}</version>
          </dependency>
          <dependency>
            <groupId>com.google.gwt</groupId>
            <artifactId>gwt-dev</artifactId>
            <version>${gwtVersion}</version>
          </dependency>
        </dependencies>
        <!-- JS is only needed in the package phase, this speeds up testing --> 
        <executions>
          <execution>
            <phase>prepare-package</phase>
            <goals>
              <goal>compile</goal>
              <goal>generateAsync</goal>
              <goal>test</goal>
            </goals>
          </execution>
        </executions>
        <!-- Plugin configuration. There are many available options, 
             see gwt-maven-plugin documentation at codehaus.org --> 
        <configuration>
          <!-- URL that should be automatically opened in the GWT shell (gwt:run). -->
          <runTarget>MyGwtMavenSampleApp.html</runTarget>
          <!-- Location of the develop-mode web application structure (gwt:run). -->
          <hostedWebapp>target/www</hostedWebapp>
          <!-- Ask GWT to create the Story of Your Compile (SOYC) (gwt:compile) -->
          <soyc>true</soyc>
        </configuration>
      </plugin>

      <!-- Add source folders to test classpath in order to run gwt-tests as normal junit-tests -->
      <!-- plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <additionalClasspathElements>
            <additionalClasspathElement>${project.build.sourceDirectory}</additionalClasspathElement>
            <additionalClasspathElement>${project.build.testSourceDirectory}</additionalClasspathElement>
          </additionalClasspathElements>
          <useManifestOnlyJar>false</useManifestOnlyJar>
          <forkMode>always</forkMode -->

          <!-- Folder for generated testing stuff --> 
          <!-- systemProperties>
            <property>
              <name>gwt.args</name>
              <value>-out target/www</value>
            </property>
          </systemProperties>
        </configuration>
      </plugin -->
      
      <!-- Copy static web files before executing gwt:run -->
      <!-- plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <phase>compile</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>target/www</outputDirectory>
              <resources>
                <resource>
                  <directory>src/main/webapp</directory>
                </resource>
              </resources>
              
              
            </configuration>
          </execution>
        </executions>
      </plugin-->
	  
	  <!-- Copia las librerias al WEB-INF/lib -->
	  <!-- mvn dependency:copy-dependencies -->
	  <!-- Esto viene a colacion de un error que lanzaba a la hora de desplegar la app 
	       que decia que estaba mal el applicationContext ya que no encontraba las librerias de TX -->
	  <!-- plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-dependency-plugin</artifactId>
			<version>2.1</version>
			<configuration>
				<outputDirectory>${webInfLibPath}</outputDirectory>
				<excludeGroupIds>${pom.groupId}</excludeGroupIds>
				<excludeScope>provided</excludeScope>
			</configuration>
	  </plugin-->

      <!-- Delete gwt generated stuff -->
      <!-- The Maven Clean Plugin, as the name implies, attempts to clean the files and directories generated by Maven during its build -->
      <!-- The Clean Plugin can be called to execute in the command-line (mvn clean:clean) o (mvn clean) -->
      <!-- If for some reason, adding clean to the command-line is not option, the Clean Plugin can be put into a project's pom.xml so that it gets executed everytime the project is built. -->
      <!-- plugin>
        <artifactId>maven-clean-plugin</artifactId>
        <configuration>
          <filesets>
            <fileset><directory>src/main/webapp/mygwtmavensampleapp</directory></fileset>
            <fileset><directory>src/main/webapp/WEB-INF/classes</directory></fileset>
            <fileset><directory>tomcat</directory></fileset>
            <fileset><directory>www-test</directory></fileset>
            <fileset><directory>.gwt-tmp</directory></fileset>
          </filesets>
        </configuration>
      </plugin-->
      
    </plugins>
  </build>
</project>



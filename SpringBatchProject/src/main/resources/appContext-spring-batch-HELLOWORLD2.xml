<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.1.xsd">
	<!--
		TUTORIALES:
		
		http://unpocodejava.wordpress.com/2011/04/30/spring-batch-conceptos/
		http://www.dosideas.com/noticias/java/214-les-presentamos-spring-batch.html
		http://www.dosideas.com/cursos/course/view.php?id=7
		http://srlawr.blogspot.com.ar/2011/10/spring-batch-frameworks-simplest.html
	
	 -->
	
	
	<!-- 
		 ********************************
	     ********CONFIGURACION*********** 
	     ********************************
	-->
	
	<!-- 
		No es un bean propio de Spring Batch, pero lo utiliza el JobRepository para manejar 
		las transacciones. En este ejemplo, como no accederemos a ningún medio transaccional, 
		usaremos una implementación "dummy" del transaction manager ya provista por 
		Spring Batch, llamada ResourcelessTransactionManager. 
	-->
	<bean id="transactionManager"
		class="org.springframework.batch.support.transaction.ResourcelessTransactionManager" />

	<!-- 
		Un JobRepository es el encargado de almacenar información sobre la corrida de los Jobs.
		Vamos a utilizar la implementación MapJobRepositoryFactoryBean que guarda la información 
		de las ejecuciones en memoria.

		En una implementación real, donde se quiere guardar en forma persistente esta información, 
		se puede usar la implementación JobRepositoryFactoryBean la cual utiliza una base de datos 
		para almacenar toda la corrida. Spring Batch utiliza un modelo de datos con 
		tablas propias para este fin.
	 -->
	<bean id="jobRepository"
		class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
		<property name="transactionManager" ref="transactionManager" />
	</bean>

	<!--
		Los JobLaunchers son responsables de iniciar un trabajo con determinados parámetros. 
		Existe una implementación prevista, SimpleJobLauncher, que se basa en una TaskExecutor 
		para poner en marcha los trabajos. Si no específico TaskExecutor, se setea entonces 
		un SyncTaskExecutor para utilizarlo 
	 -->
	<bean id="jobLauncher"
		class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>


	<!-- 
		 ************************
	     ********JOB 2*********** 
	     ************************
	     
	    En este ejemplo, el trabajo consiste en un único paso "trabajoBatch2".
        Este paso tiene un "itemReader" que lee planetas y los mapea a un objeto
        Planeta, y un "itemWriter" que imprimir objetos Planeta por consola.
        
        NOTA: Otra forma simplificada de escribir lo mismo de arriba, pero utilizando
        ItemWriter en lugar de Tasklet
	-->
	
	<batch:job id="trabajoBatch2" restartable="true">
        <batch:step id="imprimirPorConsola">
            <batch:tasklet>
                <batch:chunk reader="planetaItemReader" writer="consolaItemWriter" commit-interval="2"/>
            </batch:tasklet>
        </batch:step>
    </batch:job>
	
	<!--
        Lector de planteas. Esta reader de archivos planos es una clase
        utilitaria provista por Spring Batch. Este bean lee el archivo
        "planetas.csv". El atributo "lineMapper" indica la composicion del
        archivo (en este caso, separado por comas "," y con los nombres de
        cada una de las columnas.
        El atributo "fileSetMapper" es el encargado de convertir cada linea del
        archivo a un objeto. En este caso se utiliza una clase utilitaria de
        Spring Batch para convertir cada columna a un objeto Planeta. Esta clase
        utilitaria utiliza los nombres de columna como nombres de atributos
        en el objeto Planeta destino.
        
        Spring Batch viene por defecto con diferentes tipos de Readers para leer ficheros planos, XML o datos 
        de base de datos. Estos Readers se configuran con una especie de mapeo entre registros y objetos.
    -->
    <bean id="planetaItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">
        <property name="resource" value="classpath:com/springbatch/ejemplo2/planetas.csv"/>
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <property name="lineTokenizer">
                    <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                        <property name="delimiter" value="," />
                        <property name="names" value="Codigo, Nombre, Diametro, Tipo, Significado"/>
                    </bean>
                </property>
                <property name="fieldSetMapper">
                    <bean class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
                        <property name="prototypeBeanName" value="planeta"/>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>
    
    <!--
        Esta es la clase encargada de escribir los resultados de la lectura
        del "itemReader". Cada elemento leido por el "planetaItemReader" es
        procesado por este "itemWriter".
        ConsolaItemWriter recibe entonces un Planeta y lo muestra por consola.
    -->
    <bean id="consolaItemWriter" class="com.springbatch.ejemplo2.ConsolaItemWriter"/>
    
     <!--
        Este bean es usado por "planetaItemReader" (en particular, por su
        fieldSetMapper), para convertir cada línea del archivo de origen a un
        objeto.
        Su scope TIENE que ser "prototype", ya que se necesita una instancia
        nueva por cada invocación.
     -->
    <bean id="planeta" scope="prototype" class="com.springbatch.ejemplo2.Planeta"/>

</beans>
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.1.xsd
       http://www.springframework.org/schema/task
       http://www.springframework.org/schema/task/spring-task-3.0.xsd">
	
	<!-- 
		Un JobRepository es el encargado de almacenar información sobre la corrida de los Jobs.
		Vamos a utilizar la implementación MapJobRepositoryFactoryBean que guarda la información 
		de las ejecuciones en memoria.

		En una implementación real, donde se quiere guardar en forma persistente esta información, 
		se puede usar la implementación JobRepositoryFactoryBean la cual utiliza una base de datos 
		para almacenar toda la corrida. Spring Batch utiliza un modelo de datos con 
		tablas propias para este fin.
	 -->
	<bean id="jobRepository"
		class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
		<property name="transactionManager" ref="transactionManager" />
	</bean>
	
	<!-- 
		No es un bean propio de Spring Batch, pero lo utiliza el JobRepository para manejar 
		las transacciones. En este ejemplo, como no accederemos a ningún medio transaccional, 
		usaremos una implementación "dummy" del transaction manager ya provista por 
		Spring Batch, llamada ResourcelessTransactionManager. 
	-->
	<bean id="transactionManager"
		class="org.springframework.batch.support.transaction.ResourcelessTransactionManager" />

	<!--
		Los JobLaunchers son responsables de iniciar un trabajo con determinados parámetros. 
		Existe una implementación prevista, SimpleJobLauncher, que se basa en una TaskExecutor 
		para poner en marcha los trabajos. Si no específico TaskExecutor, se setea entonces 
		un SyncTaskExecutor para utilizarlo 
	 -->
	<bean id="jobLauncher"
		class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>
	
	
	<!-- 
	
		 *******************************
	     ******** SCHEDULING  ********** 
	     En caso de querer que ester JOB se lance de manera automatica cada tantos minutos, vamos a descomentar 
	     esta parte y vamos a ejecutar la clase llamada Launcher.java 
	     
	     http://javadigest.wordpress.com/2012/05/27/spring-batch-example-with-springs-built-in-scheduling-support/
	     *******************************
	-->
	
	<!-- 
	<bean id="myLauncher" class="com.springbatch.ejemplo10.Launcher">
		<property name="jobLauncher" ref="jobLauncher"></property>
		<property name="job" ref="xmlReadAndGeneratorStep"></property>
	</bean>
 	-->
 	<!-- 
	<task:scheduled-tasks>
	-->
		<!-- cada un minuto -->	
		<!--  task:scheduled ref="myLauncher" method="launch" cron="1 * * * * *" /-->
		<!-- otra opcion cada seis segundos-->
		<!-- <task:scheduled ref="myLauncher" method="launch" fixed-delay="6000" /> -->
	<!--  /task:scheduled-tasks-->
	

	<!-- 
		 ************************
	     ********JOB  *********** 
	     ************************
	-->

	<batch:job id="xmlReadAndGeneratorStep" restartable="true">
        
        <batch:step id="readAndWriteXML">
            <batch:tasklet>
                <batch:chunk reader="readXml" processor="processXml" writer="writeXml"  commit-interval="2" />               
            </batch:tasklet>
            <batch:next on="*" to="invocarLpm"/>
			<batch:next on="FAILED" to="logError"/> 	
			<batch:listeners>
				<batch:listener ref="stepListener"></batch:listener> <!-- ESTO ESCUCHARA ANTES DE INICIAR EL STEP Y DESPUES DE EJECUTARLO... -->
			</batch:listeners>
        </batch:step>
        
        <batch:step id="invocarLpm">
			<batch:tasklet ref="lpmInvocation" />
		</batch:step>
        
        <batch:step id="logError">
			<batch:tasklet ref="logExecutionError" />
		</batch:step>
		
    </batch:job>
    
    <bean id="stepListener" class="com.springbatch.ejemplo10.StepListener">
	</bean>
    
    <bean id="readXml" class="com.springbatch.ejemplo10.CustomStaxEventItemReader">
    	<property name="fragmentRootElementName" value="MBCard" />
    	<!--  property name="resource" value="classpath:com/springbatch/ejemplo9/input.xml" /-->
<!--     	<property name="resource" ref="proccessInputResource" /> -->
    	<property name="unmarshaller" ref="cardMarshaller" />
	</bean>
	
	<!-- LO PONEMOS PROGRAMATICAMETE ESTE VALOR... -->
<!-- 	<bean id="proccessInputResource" class="org.springframework.core.io.FileSystemResource"> -->
<!--   		<constructor-arg value="/logs/SIM10000_GX98_16K.sec.xml"/> -->
<!-- 	</bean> -->
	
	 <bean id = "cardMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
        <property name = "classesToBeBound">
            <array>
                <value>com.springbatch.ejemplo10.MBCard</value>
            </array>
        </property>
    </bean>
	
	<bean id="processXml" class="com.springbatch.ejemplo10.ProcessorItem"/>
	
<!-- 	<bean id="writeXml" class="org.springframework.batch.item.xml.StaxEventItemWriter"> -->
<!-- 	 Si usamos este writer con el atributo XMLNS, nos pincha...: Caused by: javax.xml.stream.XMLStreamException: xmlns has been already bound to . Rebinding it to http://www.gemalto.com/schema/pm is an error -->
		<bean id="writeXml" class="com.springbatch.ejemplo10.CustomStaxEventItemWriter">
		<!-- Para este extendemos del writer que viene por default de springbatch y lo modificamos  -->
	    <property name="resource" ref="proccessOutputResource" />
	    <property name="marshaller" ref="orderMarshaller" />
	    <property name="encoding" value="ISO-8859-1"/>
	    <property name="rootTagName" value="ProvisioningOrders"/>
	    <property name="rootElementAttributes">
   			<map>
   				<entry key="xmlns:xsi" value="http://www.w3.org/2001/XMLSchema-instance"/>
   				<entry key="xsi:schemaLocation" value="http://www.gemalto.com/schema/pm pmBatchFile.xsd"/>
   				<entry key="xmlns" value="http://www.gemalto.com/schema/pm"/> <!--  NOTA: Esto lo corregimos extendiendo y modificando el StaxEventItemWriter  -->
   				<entry key="generateReport" value="true"/>
   			</map>
 		</property>
	    <property name="overwriteOutput" value="true" />
	</bean>
	
	<bean id="proccessOutputResource" class="org.springframework.core.io.FileSystemResource">
  		<constructor-arg value="/logs/output.xml"/>
	</bean>
	
    <bean id = "orderMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
        <property name = "classesToBeBound">
            <array>
                <value>com.springbatch.ejemplo10.Order</value>
            </array>
        </property>
    </bean>
    
    <bean id="lpmInvocation" class="com.springbatch.ejemplo10.LPMInvocationStep">
		<property name="mensaje" value="Hola, " />
	</bean>
	
	<bean id="logExecutionError" class="com.springbatch.ejemplo10.LogExecutionErrorStep">
	</bean>
	
	
</beans>
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

	<!-- 1. Una forma de inyectar las dependencias es mediante el metodo setter -->
	<bean id="empleadoBean" class="spring.ejemplos.dos.ioc.xml.EmpleadoBean" >
		<property name="cuenta" ref="cuentaBean"></property>
	</bean>
	
	<!-- Mediante el name podemos aplicarle alias separados por coma o bien mediante la etiqueta alias -->
	<bean id="cuentaBean" name="a,b,c,d" class="spring.ejemplos.dos.ioc.xml.CuentaBean" />
	
	<alias name="cuentaBean" alias="alias1"/>
	<alias name="a" alias="alias2"/>
	
	<!-- 2. Otra forma de inyectar las dependencias es mediante el constructor -->
	<bean id="empleadoBean2" class="spring.ejemplos.dos.ioc.xml.EmpleadoBean" >
		 <constructor-arg ref="cuentaBean2"/>
	</bean>

	<bean id="cuentaBean2" class="spring.ejemplos.dos.ioc.xml.CuentaBean" />
	
	<!-- 3. Scope protoype => cada vez q se pida el objeto al contexto, este retornara una nueva instancia -->
	<bean id="pruebaBean" class="spring.ejemplos.dos.ioc.xml.PruebaBean" scope="prototype"/>
	
	<!-- 4. Inicialización Perezosa:
		 Por defecto, cuando Spring lee un fichero de configuración instancia automáticamente todos los 
		 beans de tipo Singleton definidos. Si se quiere evitar que algún bean sea instanciado automáticamente 
		 se puede utilizar el atributo lazy-init:
		 De esta forma el bean se instanciará la primera vez que sea usado, 
	-->
	<bean id="ejemploBean" class="spring.ejemplos.dos.ioc.xml.EjemploBean" lazy-init="true"/>
	
	<!-- 5. Autowiring
	  	 Una forma de reducir el tamaño de los ficheros XML de configuración es utilizar la capacidad de 
	  	 autowiring de Spring. Esta característica permite a Spring detectar automáticamente las 
	  	 dependencias de un bean con otros, instanciando e inyectando por sí solo todos los objetos necesarios.
	  	 
	  	 Spring soporta cuatro formas de autowiring a través del atributo autowire:
	  	 
			- no: Opción por defecto, obliga a especificar las dependencias de forma manual utilizando ref.
			- byName: Fuerza a Spring a resolver dependencias por nombre. Es decir, si el bean tiene un setter llamado setAuditorio 
					  buscará un bean con nombre auditorio.
			- byType: Fuerza a Spring a resolver dependencias en base a los tipos de las propiedades del bean. Es decir, Spring 
					  examinará el tipo de las propiedades del bean y buscará algún bean que tenga el mismo tipo.
			- constructor: Fuerza a Spring a resolver dependencias en base a los tipos de los parámetros del constructor del bean.
			
		NOTA: Ademas como lo instancilizamos con lazy true, vemos que ambos objetos, ZooBean y PruebaBean se crearan recien 
		cuando se le pida al contexto de spring el objeto zooBean.
		En caso que no pongamos lazy en true, vemos que ambos objetos se inicializan al levantar el contexto de Spring	 
	-->
	
	<bean id="zooBean" class="spring.ejemplos.dos.ioc.xml.ZooBean" autowire="byType" lazy-init="true" />
	
</beans>
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans 
	   					   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	   					   http://www.springframework.org/schema/context
	   					   http://www.springframework.org/schema/context/spring-context-2.5.xsd
	   					   http://www.springframework.org/schema/tx
           				   http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
           				   http://www.springframework.org/schema/aop
           				   http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">
           
     <!-- Escanea los BEANS que tienen anotaciones como por ejemplo @Repository y permite las 
     	  anotaciones como el @autowired -->       
	<context:component-scan base-package="spring.ejemplos.diesiseis.transaction.declarative" />
	       
    <!-- 1. En este caso un bean de la clase DriverManagerDataSource, sobre el que se definen las propiedades 
    	 de configuración que permiten establecer la conexión con la base de datos: 
    	 DriverManagerDataSource sólo debería utilizarse para realizar pruebas, ya que no implementa un 
    	 pool de conexiones-->       
    <bean id="dataSource"
      class="org.springframework.jdbc.datasource.DriverManagerDataSource">
	  <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
	  <property name="url" value="jdbc:oracle:thin:@localhost:1521:XE"/>
	  <property name="username" value="hibernate_tutorial"/>
	  <property name="password" value="hibernate_tutorial"/>
	</bean>
	
	<!-- 2. DataSourceTransactionManager, que será el que actúe como gestor de transacciones. Es una implementación 
		 especializada preparada para gestionar el recurso JDBC establecido en su propiedad dataSource -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
  		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!-- 
	Alternativamente, si se va realizar un despliegue sobre un servidor de aplicaciones J2EE con soporte para 
	JTA, y utilizar un recurso JDBC a través de JNDI, se podrían sustituir las dos definiciones de beans 
	anteriores por las dos siguientes:
  	
  		<jee:jndi-lookup id="dataSource" jndi-name="jdbc/pruebas"/>
  	
  		<bean id="transactionManager"
    	    class="org.springframework.transaction.jta.JtaTransactionManager" />
		</beans>
		
	En este caso al gestor de transacciones no le hace falta introducirle una dependencia con el recurso, 
	porque será gestionado por el servidor de aplicaciones junto con el resto de recursos disponibles.	
	-->    
	

  
  	<!-- 3. En primer lugar se define un advisor, con un poincut cuya expresión regular casa con la ejecución de cualquier 
	  	método de la interface CuentaService. Y en segundo lugar se define el advice correspondiente, que hace referencia al 
  		gestor de transacciones, e indica que el método transferir debe ejecutarse con una transacción de sólo lectura.
		Lo que quiere decir todo esto es que Spring detectará automáticamente la ejecución de cualquier método sobre la 
		clase de cuentas, y hará que se ejecuten dentro de una transacción utilizando el gestor de transacciones indicado. 
		Y en particular, el método transferir lo forzará a que se ejecute sobre una transacción de sólo lectura.
  	 -->
  	<aop:config>
    	<aop:advisor advice-ref="cuentaAdvice"
        	         pointcut="execution(* spring.ejemplos.diesiseis.transaction.declarative.CuentaService.*(..))"/>
  	</aop:config>
	<tx:advice id="cuentaAdvice" transaction-manager="transactionManager">
    	<tx:attributes>
      		<tx:method name="transferir" read-only="true"/>
      		<tx:method name="*"/>
    	</tx:attributes>
  	</tx:advice>
	
	<bean id="cuentaService" class="spring.ejemplos.diesiseis.transaction.declarative.CuentaService"></bean>

</beans>